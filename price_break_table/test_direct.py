#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de test direct pour diagnostiquer les r√®gles de prix d√©gressifs
Usage: Dans le shell Odoo, ex√©cuter: exec(open('addons/price_break_table/test_direct.py').read())
"""

print("=" * 60)
print("DIAGNOSTIC DES R√àGLES DE PRIX D√âGRESSIFS")
print("=" * 60)

# R√©cup√©rer l'environnement Odoo
env = env  # Variable globale du shell Odoo

# Test avec le produit ID 2
product_id = 2
print(f"\nüîç Test du produit ID: {product_id}")

try:
    # R√©cup√©rer le produit
    product = env['product.template'].browse(product_id)
    print(f"‚úÖ Produit trouv√©: {product.name}")
    print(f"   - Prix de base: {product.list_price}‚Ç¨")
    print(f"   - Cat√©gorie: {product.categ_id.name if product.categ_id else 'Aucune'}")
    
    # R√©cup√©rer la pricelist par d√©faut
    pricelist = env['product.pricelist'].browse(1)
    print(f"‚úÖ Pricelist trouv√©e: {pricelist.name}")
    
    # Rechercher TOUTES les r√®gles de prix
    all_rules = env['product.pricelist.item'].search([])
    print(f"\nüìä Total des r√®gles de prix dans le syst√®me: {len(all_rules)}")
    
    if all_rules:
        print("\nüìã D√©tail des r√®gles:")
        for rule in all_rules:
            print(f"   - R√®gle ID {rule.id}:")
            print(f"     * Pricelist: {rule.pricelist_id.name}")
            print(f"     * Min quantit√©: {rule.min_quantity}")
            print(f"     * Produit: {rule.product_tmpl_id.name if rule.product_tmpl_id else 'Global'}")
            print(f"     * Cat√©gorie: {rule.categ_id.name if rule.categ_id else 'Aucune'}")
            print(f"     * Type: {rule.compute_price}")
            if hasattr(rule, 'percent_price'):
                print(f"     * Pourcentage: {rule.percent_price}%")
            if hasattr(rule, 'fixed_price'):
                print(f"     * Prix fixe: {rule.fixed_price}‚Ç¨")
            print()
    
    # Rechercher les r√®gles sp√©cifiques au produit
    product_rules = env['product.pricelist.item'].search([
        ('product_tmpl_id', '=', product_id)
    ])
    print(f"üéØ R√®gles sp√©cifiques au produit {product.name}: {len(product_rules)}")
    
    # Rechercher les r√®gles globales
    global_rules = env['product.pricelist.item'].search([
        ('product_tmpl_id', '=', False)
    ])
    print(f"üåê R√®gles globales: {len(global_rules)}")
    
    # Rechercher les r√®gles par cat√©gorie
    if product.categ_id:
        category_rules = env['product.pricelist.item'].search([
            ('categ_id', '=', product.categ_id.id)
        ])
        print(f"üìÅ R√®gles par cat√©gorie '{product.categ_id.name}': {len(category_rules)}")
    
    # Test de la m√©thode principale
    print(f"\nüß™ Test de la m√©thode get_price_break_table_js_data:")
    try:
        result = product.get_price_break_table_js_data(1, None, 1)
        print(f"‚úÖ R√©sultat: {result}")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    # Cr√©er une r√®gle de test si aucune n'existe
    if len(product_rules) == 0 and len(global_rules) == 0:
        print(f"\nüîß Cr√©ation d'une r√®gle de test...")
        try:
            test_rule = env['product.pricelist.item'].create({
                'pricelist_id': 1,
                'product_tmpl_id': product_id,
                'min_quantity': 5,
                'compute_price': 'percentage',
                'percent_price': 10.0,
            })
            print(f"‚úÖ R√®gle de test cr√©√©e: ID {test_rule.id}")
            print(f"   - 5+ unit√©s = -10% sur le prix de base")
            
            # Test apr√®s cr√©ation
            result = product.get_price_break_table_js_data(1, None, 1)
            print(f"‚úÖ R√©sultat apr√®s cr√©ation: {result}")
            
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation r√®gle: {e}")
    
except Exception as e:
    print(f"‚ùå Erreur g√©n√©rale: {e}")
    import traceback
    traceback.print_exc()

print("\n" + "=" * 60)
print("FIN DU DIAGNOSTIC")
print("=" * 60)