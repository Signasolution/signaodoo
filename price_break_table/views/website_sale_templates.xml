<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>
        
        <!-- Template pour le tableau de prix dégressifs sur les pages produit -->
        <template id="website_sale_product_price_break" name="Product Price Break Table" inherit_id="website_sale.product">
            <xpath expr="//div[@id='add_to_cart_wrap']" position="after">
                <t t-if="product_template and product_template.id and not request.params.get('search') and not request.params.get('category_id') and request.env.context.get('active_model') == 'product.template'">
                    <t t-set="price_break_data" t-value="product_template.get_price_break_table_data()"/>
                    <t t-if="price_break_data and len(price_break_data.get('rows', [])) > 1">
                    <div class="table-responsive mt-3">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Quantité</th>
                                    <th>Prix unitaire</th>
                                </tr>
                            </thead>
                            <tbody>
                                <t t-foreach="price_break_data['rows']" t-as="row">
                                    <tr class="price-break-row"
                                        t-att-data-qty="row['min_quantity']"
                                        style="cursor: pointer;">
                                        <td><t t-esc="row['quantity_display']"/></td>
                                        <td><t t-esc="row['price_formatted']"/></td>
                                    </tr>
                                </t>
                            </tbody>
                        </table>
                    </div>

<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function () {
        var rows = document.querySelectorAll('.price-break-row');
        var input = document.querySelector('input[name="add_qty"], #quantity');

        function highlightMatchingRow(qty) {
            var matched = null;
            rows.forEach(function(row) {
                var rowQty = parseFloat(row.dataset.qty);
                if (qty >= rowQty) {
                    matched = row;
                }
            });

            rows.forEach(function(r) {
                r.classList.remove('price-break-active');
            });
            if (matched) {
                matched.classList.add('price-break-active');
            }
        }

        if (input) {
            input.addEventListener('input', function () {
                var qty = parseFloat(input.value);
                if (!isNaN(qty)) {
                    highlightMatchingRow(qty);
                }
            });
        }

        rows.forEach(function (row) {
            row.addEventListener('click', function () {
                var qty = parseFloat(row.dataset.qty);
                if (input) {
                    input.value = qty;
                    ['input', 'change', 'blur'].forEach(function(ev) {
                        input.dispatchEvent(new Event(ev, { bubbles: true }));
                    });
                }
                highlightMatchingRow(qty);
            });
        });
    });
</script>

<style>
    .price-break-row:hover {
        background-color: #e3f2fd;
    }
    .price-break-active {
        background-color: #e8f5e8 !important;
        border: 2px solid #28a745 !important;
        font-weight: bold;
    }
</style>
                    </t>
                </t>
            </xpath>
        </template>

    </data>
</odoo>
